"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = moduleFederationSsrDevServer;
const devkit_1 = require("@nx/devkit");
const ssr_dev_server_impl_1 = require("@nx/webpack/src/executors/ssr-dev-server/ssr-dev-server.impl");
const path_1 = require("path");
const module_federation_1 = require("@nx/webpack/src/utils/module-federation");
const async_iterable_1 = require("@nx/devkit/src/utils/async-iterable");
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const parse_static_remotes_config_1 = require("@nx/webpack/src/utils/module-federation/parse-static-remotes-config");
const file_server_impl_1 = require("@nx/web/src/executors/file-server/file-server.impl");
const cache_directory_1 = require("nx/src/utils/cache-directory");
const start_ssr_remote_proxies_1 = require("@nx/webpack/src/utils/module-federation/start-ssr-remote-proxies");
const wait_for_port_open_1 = require("@nx/web/src/utils/wait-for-port-open");
function normalizeOptions(options) {
    return {
        ...options,
        ssl: options.ssl ?? false,
        sslCert: options.sslCert ? (0, path_1.join)(devkit_1.workspaceRoot, options.sslCert) : undefined,
        sslKey: options.sslKey ? (0, path_1.join)(devkit_1.workspaceRoot, options.sslKey) : undefined,
    };
}
function getBuildOptions(buildTarget, context) {
    const target = (0, devkit_1.parseTargetString)(buildTarget, context);
    const buildOptions = (0, devkit_1.readTargetOptions)(target, context);
    return {
        ...buildOptions,
    };
}
async function* startSsrStaticRemotesFileServer(ssrStaticRemotesConfig, context, options) {
    if (ssrStaticRemotesConfig.remotes.length === 0) {
        yield { success: true };
        return;
    }
    // The directories are usually generated with /browser and /server suffixes so we need to copy them to a common directory
    const commonOutputDirectory = (0, path_1.join)(devkit_1.workspaceRoot, 'tmp/static-remotes');
    for (const app of ssrStaticRemotesConfig.remotes) {
        const remoteConfig = ssrStaticRemotesConfig.config[app];
        (0, fs_1.cpSync)(remoteConfig.outputPath, (0, path_1.join)(commonOutputDirectory, remoteConfig.urlSegment), {
            force: true,
            recursive: true,
        });
    }
    const staticRemotesIter = (0, file_server_impl_1.default)({
        cors: true,
        watch: false,
        staticFilePath: commonOutputDirectory,
        parallel: false,
        spa: false,
        withDeps: false,
        host: options.host,
        port: options.staticRemotesPort,
        ssl: options.ssl,
        sslCert: options.sslCert,
        sslKey: options.sslKey,
        cacheSeconds: -1,
    }, context);
    yield* staticRemotesIter;
}
async function startRemotes(remotes, context, options) {
    const remoteIters = [];
    const target = 'serve';
    for (const app of remotes) {
        const remoteProjectServeTarget = context.projectGraph.nodes[app].data.targets[target];
        const isUsingModuleFederationSsrDevServerExecutor = remoteProjectServeTarget.executor.includes('module-federation-ssr-dev-server');
        const configurationOverride = options.devRemotes?.find((remote) => typeof remote !== 'string' && remote.remoteName === app)?.configuration;
        {
            const defaultOverrides = {
                ...(options.host ? { host: options.host } : {}),
                ...(options.ssl ? { ssl: options.ssl } : {}),
                ...(options.sslCert ? { sslCert: options.sslCert } : {}),
                ...(options.sslKey ? { sslKey: options.sslKey } : {}),
            };
            const overrides = {
                watch: true,
                ...defaultOverrides,
                ...(isUsingModuleFederationSsrDevServerExecutor
                    ? { isInitialHost: false }
                    : {}),
            };
            remoteIters.push(await (0, devkit_1.runExecutor)({
                project: app,
                target,
                configuration: configurationOverride ?? context.configurationName,
            }, overrides, context));
        }
    }
    return remoteIters;
}
async function buildSsrStaticRemotes(staticRemotesConfig, nxBin, context, options) {
    if (!staticRemotesConfig.remotes.length) {
        return;
    }
    devkit_1.logger.info(`Nx is building ${staticRemotesConfig.remotes.length} static remotes...`);
    const mapLocationOfRemotes = {};
    for (const remoteApp of staticRemotesConfig.remotes) {
        mapLocationOfRemotes[remoteApp] = `http${options.ssl ? 's' : ''}://${options.host}:${options.staticRemotesPort}/${staticRemotesConfig.config[remoteApp].urlSegment}`;
    }
    await new Promise((resolve) => {
        const childProcess = (0, child_process_1.fork)(nxBin, [
            'run-many',
            '--target=server',
            '--projects',
            staticRemotesConfig.remotes.join(','),
            ...(context.configurationName
                ? [`--configuration=${context.configurationName}`]
                : []),
            ...(options.parallel ? [`--parallel=${options.parallel}`] : []),
        ], {
            cwd: context.root,
            stdio: ['ignore', 'pipe', 'pipe', 'ipc'],
        });
        // Add a listener to the child process to capture the build log
        const remoteBuildLogFile = (0, path_1.join)(cache_directory_1.workspaceDataDirectory, `${new Date().toISOString().replace(/[:\.]/g, '_')}-build.log`);
        const remoteBuildLogStream = (0, fs_1.createWriteStream)(remoteBuildLogFile);
        childProcess.stdout.on('data', (data) => {
            const ANSII_CODE_REGEX = /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;
            const stdoutString = data.toString().replace(ANSII_CODE_REGEX, '');
            remoteBuildLogStream.write(stdoutString);
            // in addition to writing into the stdout stream, also show error directly in console
            // so the error is easily discoverable. 'ERROR in' is the key word to search in webpack output.
            if (stdoutString.includes('ERROR in')) {
                devkit_1.logger.log(stdoutString);
            }
            if (stdoutString.includes('Successfully ran target server')) {
                childProcess.stdout.removeAllListeners('data');
                devkit_1.logger.info(`Nx Built ${staticRemotesConfig.remotes.length} static remotes.`);
                resolve();
            }
        });
        process.on('SIGTERM', () => childProcess.kill('SIGTERM'));
        process.on('exit', () => childProcess.kill('SIGTERM'));
    });
    return mapLocationOfRemotes;
}
async function* moduleFederationSsrDevServer(ssrDevServerOptions, context) {
    const options = normalizeOptions(ssrDevServerOptions);
    // Force Node to resolve to look for the nx binary that is inside node_modules
    const nxBin = require.resolve('nx/bin/nx');
    let iter = (0, ssr_dev_server_impl_1.default)(options, context);
    const projectConfig = context.projectsConfigurations.projects[context.projectName];
    const buildOptions = getBuildOptions(options.browserTarget, context);
    let pathToManifestFile = (0, path_1.join)(context.root, projectConfig.sourceRoot, 'assets/module-federation.manifest.json');
    if (options.pathToManifestFile) {
        const userPathToManifestFile = (0, path_1.join)(context.root, options.pathToManifestFile);
        if (!(0, fs_1.existsSync)(userPathToManifestFile)) {
            throw new Error(`The provided Module Federation manifest file path does not exist. Please check the file exists at "${userPathToManifestFile}".`);
        }
        else if ((0, path_1.extname)(userPathToManifestFile) !== '.json') {
            throw new Error(`The Module Federation manifest file must be a JSON. Please ensure the file at ${userPathToManifestFile} is a JSON.`);
        }
        pathToManifestFile = userPathToManifestFile;
    }
    if (!options.isInitialHost) {
        return yield* iter;
    }
    const moduleFederationConfig = (0, module_federation_1.getModuleFederationConfig)(buildOptions.tsConfig, context.root, projectConfig.root, 'react');
    const remoteNames = options.devRemotes?.map((remote) => typeof remote === 'string' ? remote : remote.remoteName);
    const remotes = (0, module_federation_1.getRemotes)(remoteNames, options.skipRemotes, moduleFederationConfig, {
        projectName: context.projectName,
        projectGraph: context.projectGraph,
        root: context.root,
    }, pathToManifestFile);
    options.staticRemotesPort ??= remotes.staticRemotePort;
    process.env.NX_MF_DEV_REMOTES = JSON.stringify([
        ...(remotes.devRemotes.map((r) => typeof r === 'string' ? r : r.remoteName) ?? []),
        projectConfig.name,
    ]);
    const staticRemotesConfig = (0, parse_static_remotes_config_1.parseStaticSsrRemotesConfig)([...remotes.staticRemotes, ...remotes.dynamicRemotes], context);
    const mappedLocationsOfStaticRemotes = await buildSsrStaticRemotes(staticRemotesConfig, nxBin, context, options);
    const devRemoteIters = await startRemotes(remotes.devRemotes, context, options);
    const staticRemotesIter = startSsrStaticRemotesFileServer(staticRemotesConfig, context, options);
    (0, start_ssr_remote_proxies_1.startSsrRemoteProxies)(staticRemotesConfig, mappedLocationsOfStaticRemotes, options.ssl
        ? {
            pathToCert: options.sslCert,
            pathToKey: options.sslKey,
        }
        : undefined);
    const combined = (0, async_iterable_1.combineAsyncIterables)(staticRemotesIter, ...devRemoteIters);
    let refs = 1 + (devRemoteIters?.length ?? 0);
    for await (const result of combined) {
        if (result.success === false)
            throw new Error('Remotes failed to start');
        if (result.success)
            refs--;
        if (refs === 0)
            break;
    }
    return yield* (0, async_iterable_1.combineAsyncIterables)(iter, (0, async_iterable_1.createAsyncIterable)(async ({ next, done }) => {
        const host = options.host ?? 'localhost';
        const baseUrl = `http${options.ssl ? 's' : ''}://${host}:${options.port}`;
        if (!options.isInitialHost) {
            next({ success: true, baseUrl });
            done();
            return;
        }
        if (remotes.remotePorts.length === 0) {
            next({ success: true, baseUrl });
            done();
            return;
        }
        try {
            const portsToWaitFor = staticRemotesIter
                ? [options.staticRemotesPort, ...remotes.remotePorts]
                : [...remotes.remotePorts];
            await Promise.all(portsToWaitFor.map((port) => (0, wait_for_port_open_1.waitForPortOpen)(port, {
                retries: 480,
                retryDelay: 2500,
                host,
            })));
            devkit_1.logger.info(`Nx all ssr remotes have started, server ready at ${baseUrl}`);
            next({ success: true, baseUrl });
        }
        catch (error) {
            throw new Error(`Nx failed to start ssr remotes. Check above for errors.`, {
                cause: error,
            });
        }
        finally {
            done();
        }
    }));
}
